title: Git Workflows
subheading: Best Practices for SPS
slides:
  - name: Who are we
    type: list
    content:
    - The people in your neighborhood
    - Mike Bjerkness
    - Director of Engineering for Web Applications
    - Paul J DeCoursey
    - Principal Software Engineer for Web Applications
    notes: I feel good, I feel great, I feel wonderful.
  - name: Git workflows
    type: list
    content:
    - What is this and why do I care?
    - Git is a distributed collaboration tool
    - A git workflow is how software developers use git to collaborate in a productive way
    - Merging and deploying of code shouldn't be a job in and of itself
    - We need consistency in our usage of git
    - Using the same workflow across teams and projects will help:
      - on-boarding
      - ops
      - development resources moving between teams
      - communication across teams
    notes: Why did the chicken cross the road?
  - name: Some examples
    type: list
    content:
      - centralized workflow -- commit directly to master
      - feature branch workflow -- branch off master, do your work, merge to master
      - gitflow -- very robust great for versioned scheduled releases
      - github flow -- simplier great for continuous deployment
    notes: gitflow is complex and can be confusing and code gets lost.
  - name: centralized workflow
    type: image
    img_src: media/apes.jpg
  - name: centralized workflow
    type: list
    content:
      - does not scale well with larger teams
      - no forks
      - code reviews are not built in
      - wild, wild west
      - <img src="media/git-centralized.png" />
  - name: feature branch workflow
    type: image
    img_src: media/carcrash.jpg
  - name: feature branch workflow
    type: list
    content:
      - feature branches can get out of date with master
      - as teams grow integrations can become unruly
      - no forks!
      - <img src="media/git-branching.png" />
  - name: gitflow
    url: http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/
    type: image
    img_src: media/gitflow.png
  - name: gitflow - pros
    type: list
    content:
      - supports forks and pull requests
      - clear what the current "version" is
      - tracking what changes are in each "version" is easy
      - seems to fit well into good agile practices
      - there is always an active development branch and a passive master branch
  - name: gitflow - cons
    type: list
    content:
      - there is always an active development branch and a passive master branch
      - loosely dependent on the idea that each sprint is marching towards a new "version"
      - tightly coulpled to the idea of releases with multiple features
      - <img src="media/in-the-weeds-300x198.jpg" />
  - name: github flow
    type: image
    url:
    - https://guides.github.com/introduction/flow/index.html
    - http://scottchacon.com/2011/08/31/github-flow.html
    img_src: media/githubflow.png
  - name: github flow - pros
    type: list
    content:
      - simple, one main branch that represents the project
      - features are done on branches and can be independently developed and tested
      - supports forks and pull request
      - tracking what changes are in each feature is easy
  - name: github flow - cons
    type: list
    content:
      - easy for parallel features to diverge from the base and become a nightmare for merging
      - practically perfect in everyway
      - <img src="media/cheeky-mary-poppins.gif" />
  - name: SPS CodeFlow - Overview
    type: list
    content:
    - Essentially github flow, but with some added guidelines
    - developers should fork the projects and do all work on their forks
    - main project should only have master branch
    - pull requests are built and can be deployed to test environments
    - master branch commits are tagged with build id
    - code that is deployed will be tagged in master of deployment date
  - name: SPS CodeFlow - Pull requests
    type: list
    content:
    - All code changes need to go through a pull request
    - Everyone reviews the code
    - <img src="media/code_review.jpg" height="300" />
    - Everyone is equal and all ideas and concerns shared
    - Discussions need to be constructive
    - Sign-off from key team members required for merge (teams should decide what that means for their team)
  - name: SPS CodeFlow - Versioning
    type: list
    content:
    - YYYYMMDD.HHMMSS[-pull-<PR#>][-<branch>] (utc time)
    - Major version is the current utc date stamp
    - Minor version is the current hour, minute and seconds
    - If the build is of a branch then the branch is appendended
    - If the build is of a Pull Request, then pull-# is appending along with the branch
  - name: SPS CodeFlow - Versioning
    type: code
    content:
      - pyweb-core==20141106.102432
      - Django==1.6.2
      - logstash-formatter==0.5.8
      - redis==2.9.1
      - passlib==1.6.2
      - pycrypto==2.6.1
      - django-cors-headers==0.12
  - name: Build artifacts
    type: list
    content:
    - Build artifacts should be built and submitted to an Ops approved artifact repository, such as Gemfury
    - Dependent artifacts should be referenced by the exact build number
    - Simple and precise definition of builds
    - Configurations:
      - Should not be in the build artifact
      - Should be in environment specific artifacts
      - If default configs exist in builds they should default to a broken state
  - name: fin
    type: image
    img_src: media/fin.jpg
